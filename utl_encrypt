-- -----------------------------------------------------------
-- Program:	utl_encrypt.sql
-- Purpose:	demonstrate use of dbms_crypto by
--		prompting a user for a password and encrypting
--		and decrypting the data
-- Author:	Oracle Corp
-- Date:	2015
-- -----------------------------------------------------------

 SET SERVEROUTPUT ON;
 SET VERIFY OFF;
 CLEAR BUFFER
 PROMPT Please enter a password - Must be 8 characters !
 PROMPT
 ACCEPT PASSWD

  DECLARE
    input_string       VARCHAR2(16) := '&PASSWD';
    raw_input          RAW(128) := UTL_RAW.CAST_TO_RAW(input_string);
    
    num_key_bytes      NUMBER := 256/8;        -- key length 256 bits (32 bytes)
    key_bytes_raw      RAW (32);               -- stores 256-bit encryption key
    
    encryption_type    PLS_INTEGER := SYS.DBMS_CRYPTO.ENCRYPT_AES256 + DBMS_CRYPTO.CHAIN_CBC + DBMS_CRYPTO.PAD_PKCS5;
    
    encrypted_raw      RAW(2048);
    encrypted_string   VARCHAR2(2048);

    decrypted_raw      RAW(2048);
    decrypted_string   VARCHAR2(2048);

    ERROR_IN_INPUT_BUFFER_LENGTH EXCEPTION;
    PRAGMA EXCEPTION_INIT(ERROR_IN_INPUT_BUFFER_LENGTH, -28232);
    INPUT_BUFFER_LENGTH_ERR_MSG VARCHAR2(100) :=
     '*** DES INPUT BUFFER NOT A MULTIPLE OF 8 BYTES - IGNORING EXCEPTION ***';
    
    DOUBLE_ENCRYPT_NOT_PERMITTED EXCEPTION;
    PRAGMA EXCEPTION_INIT(DOUBLE_ENCRYPT_NOT_PERMITTED, -28233);
    DOUBLE_ENCRYPTION_ERR_MSG VARCHAR2(100) :=
     '*** CANNOT DOUBLE ENCRYPT DATA - IGNORING EXCEPTION ***';

 -- Begin testing raw data encryption and decryption
 
  BEGIN
    DBMS_OUTPUT.PUT_LINE('> ========= BEGIN TEST RAW DATA =========');
    DBMS_OUTPUT.PUT_LINE('> Raw input                        : ' ||
                  UTL_RAW.CAST_TO_VARCHAR2(raw_input));
    DBMS_OUTPUT.PUT_LINE('> ========= END TEST RAW DATA =========');
    DBMS_OUTPUT.PUT_LINE('                                       ');

    DBMS_OUTPUT.PUT_LINE('>  ');
    DBMS_OUTPUT.PUT_LINE('Original string: ' || input_string);
    DBMS_OUTPUT.PUT_LINE('>  ');
     
    key_bytes_raw := SYS.DBMS_CRYPTO.RANDOMBYTES (num_key_bytes);
    
    encrypted_raw := SYS.DBMS_CRYPTO.ENCRYPT
      (
         src => UTL_I18N.STRING_TO_RAW (input_string,'AL32UTF8'),
         typ => encryption_type,
         key => key_bytes_raw
      );
    encrypted_string := UTL_I18N.RAW_TO_CHAR (encrypted_raw, 'AL32UTF8');

    DBMS_OUTPUT.PUT_LINE('>  ');
    DBMS_OUTPUT.PUT_LINE ('Encrypted string: ' || encrypted_string);
    DBMS_OUTPUT.PUT_LINE('>  ');
    
    decrypted_raw := SYS.DBMS_CRYPTO.DECRYPT
      (
         src => encrypted_raw,
         typ => encryption_type,
         key => key_bytes_raw
      );
    decrypted_string := UTL_I18N.RAW_TO_CHAR (decrypted_raw, 'AL32UTF8');
 
    DBMS_OUTPUT.PUT_LINE('>  ');
    DBMS_OUTPUT.PUT_LINE ('Decrypted string: ' || decrypted_string);
    DBMS_OUTPUT.PUT_LINE('>  ');

  EXCEPTION
       WHEN ERROR_IN_INPUT_BUFFER_LENGTH THEN
              DBMS_OUTPUT.PUT_LINE('> ' || INPUT_BUFFER_LENGTH_ERR_MSG);
          
 END;
/
-- -------------------------------------------------------------
